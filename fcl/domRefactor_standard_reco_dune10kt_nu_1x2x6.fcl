# standard_reco_dune10kt.fcl
#
# Dom Brailsford
# April 2020
#
# Runs the full suite of dune FD reconstruction algorithms, including the photon detection system

#include "services_dune.fcl"
#include "domRefactor_workflow_reco_dune10kt.fcl"
#include "tools_dune.fcl"

process_name: Reco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_hist.root" }
  MemoryTracker:     {}
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefd_1x2x6_reco_services
}
#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
  saveMemoryObjectThreshold: 0
  inputCommands: ["keep *_*_*_*", "drop *_*_*_Reco" ]
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
     @table::dunefd_horizdrift_producers
     wclsmcnfsp: @local::dune10kt_1x2x6_mc_nfsp
 }



 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 reco: [ @sequence::dunefd_horizdrift_workflow_reco ]
 trigger_paths: [ reco ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_reco.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
   saveMemoryObjectThreshold: 0
 }
}

physics.producers.blurredclusterdc.ShowerReconOnly: true
physics.producers.blurredcluster.ShowerReconOnly: true
physics.producers.emtrkmichelid.PointIdAlg.NNetModelFile: "CnnModels/pdune_em-trk-michel_clean_on_neutrinos_iter100_a    w.nnet"
physics.producers.emtrkmichelid.PointIdAlg.NNetOutputs: ["track", "em", "michel", "none"]
physics.producers.pmtrack.PMAlgTracking.FlipToBeam: true
physics.producers.pmtrack.PMAlgTracking.AutoFlip_dQdx: false
physics.producers.pmtrackdc.PMAlgTracking.FlipToBeam: true
physics.producers.pmtrackdc.PMAlgTracking.AutoFlip_dQdx: false
physics.producers.pandoracalo.Flip_dQdx: false
physics.producers.pmtrackcalo.Flip_dQdx: false
physics.producers.pmtrajfitcalo.Flip_dQdx: false
physics.producers.pmtracktccalo.Flip_dQdx: false
physics.producers.pmtrajfittccalo.Flip_dQdx: false
